buildscript {
	ext {
		cleanArchitectureVersion = '3.24.0'
		springBootVersion = '3.5.4'
		sonarVersion = '6.2.0.5505'
		jacocoVersion = '0.8.13'
		pitestVersion = '1.19.0-rc.1'
        lombokVersion = '1.18.38'
        mapstructVersion = '1.6.3'
        springdocVersion = '2.4.0'
	}
}

plugins {
	id 'co.com.bancolombia.cleanArchitecture' version "${cleanArchitectureVersion}"
	id 'org.springframework.boot' version "${springBootVersion}" apply false
	id 'info.solidsoft.pitest' version "${pitestVersion}" apply false
	id 'org.sonarqube' version "${sonarVersion}"
	id 'jacoco'
}

sonar {
    def modules = subprojects.projectDir.collect { "${it.toString().replace(project.projectDir.toString() + "/", "")}" }
    properties {
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.modules", "${modules.join(',')}"
        property "sonar.sources", "src,deployment,settings.gradle,main.gradle,build.gradle,${modules.collect { "${it}/build.gradle" }.join(',')}"
        property "sonar.exclusions","**/MainApplication.java"
        property "sonar.tests", "src/test"
        property "sonar.java.binaries", "**/build/classes/java/main"
        property "sonar.junit.reportsPath", "**/build/test-results/test"
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacocoMergedReport/jacocoMergedReport.xml"
        property "sonar.pitest.reportPaths", "build/reports/pitest/mutations.xml"
        property "sonar.externalIssuesReportPaths", "build/issues.json"
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

jacoco {
    toolVersion = "0.8.13"
}

test {
    finalizedBy jacocoTestReport
}

task myJacocoMergedReport(type: JacocoReport) {
    description = 'Generates an aggregate report from all subprojects'
    group = 'Verification'
    
    // Configurar despuÃ©s de que todos los proyectos hayan sido evaluados
    gradle.projectsEvaluated {
        def testTasks = []
        def srcDirs = []
        def classDirs = []
        def execData = []
        
        subprojects.each { subproject ->
            subproject.tasks.withType(Test).each { testTask ->
                testTasks.add(testTask)
            }
            
            if (subproject.pluginManager.hasPlugin('java')) {
                srcDirs.add(subproject.sourceSets.main.allSource.srcDirs)
                classDirs.add(subproject.sourceSets.main.output)
                
                subproject.tasks.withType(JacocoReport).each { reportTask ->
                    if (reportTask.executionData.files) {
                        execData.addAll(reportTask.executionData.files)
                    }
                }
            }
        }
        
        dependsOn testTasks
        
        additionalSourceDirs.setFrom files(srcDirs)
        sourceDirectories.setFrom files(srcDirs)
        classDirectories.setFrom files(classDirs)
        executionData.setFrom files(execData).filter { it.exists() }
    }
    
    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }
}

apply from: './main.gradle'
